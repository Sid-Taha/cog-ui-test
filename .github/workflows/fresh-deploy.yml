# .github\workflows\fresh-deploy.yml
# Updated GitHub Actions Workflow for Static Export

# Replace your current .github/workflows/deploy.yml with this:

name: Deploy Static Next.js to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # 2. Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    # 3. Install dependencies
    - name: Install dependencies
      run: npm ci
    
    # 4. Build Next.js application with static export
    - name: Build and export Next.js application
      run: |
        npm run build
        npm run export || echo "No export script found, using build output"
      env:
        NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
        NEXT_PUBLIC_COGNITO_REGION: ${{ secrets.COGNITO_REGION }}
        # Skip ESLint during build
        ESLINT_NO_DEV_ERRORS: true
        DISABLE_ESLINT_PLUGIN: true
        
    # 5. Prepare deployment package
    - name: Prepare deployment package
      run: |
        echo "Creating deployment package..."
        mkdir -p deployment
        
        # Copy build output
        cp -r .next deployment/
        cp package*.json deployment/
        
        # Copy static files if they exist
        if [ -d "out" ]; then
          echo "Found static export in 'out' directory"
          cp -r out deployment/static-export
        fi
        
        # Copy public files if they exist
        if [ -d "public" ]; then
          cp -r public deployment/
        fi
        
        # Create the deployment archive
        tar -czf latest-deployment.tar.gz deployment/
        ls -la latest-deployment.tar.gz
        
    # 6. Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    # 7. Upload to S3
    - name: Upload deployment package to S3
      run: |
        echo "Uploading deployment package to S3..."
        aws s3 cp latest-deployment.tar.gz s3://${{ secrets.S3_BUCKET_NAME }}/latest-deployment.tar.gz
        echo "âœ… Upload to S3 completed!"
        
    # 8. Deployment summary
    - name: Deployment Summary
      run: |
        echo "ðŸš€ Deployment Summary:"
        echo "- Static build completed successfully"
        echo "- Package uploaded to S3: s3://${{ secrets.S3_BUCKET_NAME }}/latest-deployment.tar.gz"
        echo "- Static files will be served directly by Nginx"
        echo "- Application URL: http://$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text 2>/dev/null || echo '44.200.229.16')"